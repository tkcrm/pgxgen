package templates

import (
	"fmt"
	"strings"
	"github.com/gobeam/stringy"
)

type ConstantsTableNamesParamsItem struct {
	NamePreffix string
	Name        string
}

type ConstantsColumnNamesParamsItem struct {
	TableName   string
	NamePreffix string
	Name        string
}

type ConstantsParams struct {
	Package     string
	Version     string
	Tables      []ConstantsTableNamesParamsItem
	ColumnNames []ConstantsColumnNamesParamsItem
}

func (p ConstantsParams) GetColumnsForTable(tableName string) []ConstantsColumnNamesParamsItem {
	res := []ConstantsColumnNamesParamsItem{}
	for _, item := range p.ColumnNames {
		if item.TableName == tableName {
			res = append(res, item)
		}
	}
	return res
}

func (p ConstantsParams) GetHeaderComment() string {
	content := strings.Builder{}
	content.WriteString(fmt.Sprintf(`// Code generated by pgxgen. DO NOT EDIT.
// versions:
//   pgxgen %s
package %s

import (
  "strings"
  "github.com/gobeam/stringy"
)`, p.Version, p.Package))
	content.WriteString("\n")
	return content.String()
}

func (p ConstantsParams) GetTablesContent() string {
	content := strings.Builder{}
	content.WriteString(`type TableName string

func (s TableName) String() string { return string(s) }`)
	content.WriteString("\n")

	for _, item := range p.Tables {
		content.WriteString("\nconst (\n")
		content.WriteString(fmt.Sprintf(`TableName%s TableName = "%s"`, item.NamePreffix, item.Name))
		content.WriteString(")\n")
	}
	return content.String()
}

func (p ConstantsParams) GetColumnNamesContent() string {
	content := strings.Builder{}
	content.WriteString(`type ColumnName string

func (s ColumnName) String() string { return string(s) }

func (s ColumnName) StructName() string {
  v := stringy.New(string(s)).CamelCase().Get()
	v = stringy.New(v).UcFirst()
  return strings.ReplaceAll(v, "Id", "ID")
}

type ColumnNames []ColumnName

func (s ColumnNames) Strings() []string {
  res := make([]string, len(s))
  for idx, colName := range s {
    res[idx] = colName.String()
  }
  return res
}`)
	content.WriteString("\nconst (\n")

	for _, item := range p.ColumnNames {
		content.WriteString(fmt.Sprintf(`ColumnName%s ColumnName = "%s"`, item.NamePreffix, item.Name))
		content.WriteString("\n")
	}
	content.WriteString(")\n\n")

	for _, tableName := range p.Tables {
		content.WriteString(fmt.Sprintf("func %sColumnNames() ColumnNames {\n", stringy.New(stringy.New(tableName.Name).CamelCase().Get()).UcFirst()))
		content.WriteString("return ColumnNames{\n")
		for _, item := range p.GetColumnsForTable(tableName.Name) {
			content.WriteString(fmt.Sprintf("ColumnName%s,\n", item.NamePreffix))
		}
		content.WriteString("}\n")
		content.WriteString("}\n")
	}
	return content.String()
}

templ Constatnts(p ConstantsParams) {
	@templ.Raw(p.GetHeaderComment())
	if len(p.Tables) > 0 {
		@templ.Raw(p.GetTablesContent())
	}
	if len(p.ColumnNames) > 0 {
		@templ.Raw(p.GetColumnNamesContent())
	}
}
