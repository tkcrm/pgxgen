{{ define "keystoneModelsFile" }}// Code generated by pgxgen. DO NOT EDIT.
// versions:
//   pgxgen {{ .Version }}

{{ range $packet, $values := .Imports }}
import { {{join $values ","}} } from "{{ $packet }}";
{{ end }}
{{ range $packet, $values := .ImportTypes }}
import type { {{join $values ","}} } from "{{ $packet }}";
{{ end }}

{{ range .Structs }}
{{if .Name }}@model("{{ $.DecoratorModelNamePrefix }}{{snake_case .Name}}")
export class {{.Name}}{{ $.ExportModelSuffix}} extends Model({
{{- range .Fields}}
  {{if .Type}}{{lcfirst (replace_id .Name)}}: {{ getType .Type }},{{ end }}
{{- end}}
}) {
{{ if exist_field_id .Name "id"}}
  @computed
  get isNew(): boolean {
    return !this.id;
  }

  @computed
  get getInitialValues(): Record<string, any> {
    return this.isNew ? {} : this;
  }{{ end }}
}

{{ if exist_field_id .Name "id"}}
@model("{{ $.DecoratorModelNamePrefix }}{{snake_case .Name}}s")
export class {{.Name}}s{{ $.ExportModelSuffix}} extends Model({
  isFormInited: prop(false).withSetter(),
  isLoading: prop(false).withSetter(),
  isSearching: prop(false).withSetter(),
  isCreatingOrUpdating: prop(false).withSetter(),

  findResponse: prop<{{.Name}}{{ $.ExportModelSuffix}}[] | undefined>().withSetter(),
  getResponse: prop<{{.Name}}{{ $.ExportModelSuffix}} | undefined>().withSetter(),

  showDeleteModal: tProp(types.boolean, false).withSetter(),
  selectedItem: tProp(types.maybe(types.model({{.Name}}{{ $.ExportModelSuffix}}))),
}) {
  @observable.ref draft: Draft<{{.Name}}{{ $.ExportModelSuffix}}> | undefined;

  @modelAction
  setDraft(v: {{.Name}}{{ $.ExportModelSuffix}} | undefined): void {
    if(v) {
      this.draft = draft(v);
      this.formInstance?.updateFormValues(this.draft?.data.getInitialValues)
    }
  }

  formInstance: FormInstance | undefined;

  @modelAction
  setFormInstance(v: FormInstance | undefined): void {
    this.isFormInited = false;
    this.formInstance = v;
    if(v) {
      this.isFormInited = true;
    }
  }

  @modelAction
  clearTempData(): void {
    this.setGetResponse(undefined);
    this.setDraft(undefined);
    this.setFormInstance(undefined);
  }

  @modelAction
  setSelectedItem(v: {{.Name}}{{ $.ExportModelSuffix}} | undefined): void {
    if (!v) {
      this.selectedItem = undefined;
      return;
    }
    this.selectedItem = clone(v);
  }
}{{ end }}{{ end }}

{{ end }}
{{ end }}
