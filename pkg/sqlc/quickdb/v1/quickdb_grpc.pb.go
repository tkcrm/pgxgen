// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/quickdb.proto

package quickdbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Quick_CreateEphemeralDatabase_FullMethodName = "/remote.sqlc.dev.quickdb.v1.Quick/CreateEphemeralDatabase"
	Quick_DropEphemeralDatabase_FullMethodName   = "/remote.sqlc.dev.quickdb.v1.Quick/DropEphemeralDatabase"
	Quick_UploadArchive_FullMethodName           = "/remote.sqlc.dev.quickdb.v1.Quick/UploadArchive"
	Quick_VerifyQuerySets_FullMethodName         = "/remote.sqlc.dev.quickdb.v1.Quick/VerifyQuerySets"
)

// QuickClient is the client API for Quick service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuickClient interface {
	CreateEphemeralDatabase(ctx context.Context, in *CreateEphemeralDatabaseRequest, opts ...grpc.CallOption) (*CreateEphemeralDatabaseResponse, error)
	DropEphemeralDatabase(ctx context.Context, in *DropEphemeralDatabaseRequest, opts ...grpc.CallOption) (*DropEphemeralDatabaseResponse, error)
	UploadArchive(ctx context.Context, in *UploadArchiveRequest, opts ...grpc.CallOption) (*UploadArchiveResponse, error)
	VerifyQuerySets(ctx context.Context, in *VerifyQuerySetsRequest, opts ...grpc.CallOption) (*VerifyQuerySetsResponse, error)
}

type quickClient struct {
	cc grpc.ClientConnInterface
}

func NewQuickClient(cc grpc.ClientConnInterface) QuickClient {
	return &quickClient{cc}
}

func (c *quickClient) CreateEphemeralDatabase(ctx context.Context, in *CreateEphemeralDatabaseRequest, opts ...grpc.CallOption) (*CreateEphemeralDatabaseResponse, error) {
	out := new(CreateEphemeralDatabaseResponse)
	err := c.cc.Invoke(ctx, Quick_CreateEphemeralDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickClient) DropEphemeralDatabase(ctx context.Context, in *DropEphemeralDatabaseRequest, opts ...grpc.CallOption) (*DropEphemeralDatabaseResponse, error) {
	out := new(DropEphemeralDatabaseResponse)
	err := c.cc.Invoke(ctx, Quick_DropEphemeralDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickClient) UploadArchive(ctx context.Context, in *UploadArchiveRequest, opts ...grpc.CallOption) (*UploadArchiveResponse, error) {
	out := new(UploadArchiveResponse)
	err := c.cc.Invoke(ctx, Quick_UploadArchive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quickClient) VerifyQuerySets(ctx context.Context, in *VerifyQuerySetsRequest, opts ...grpc.CallOption) (*VerifyQuerySetsResponse, error) {
	out := new(VerifyQuerySetsResponse)
	err := c.cc.Invoke(ctx, Quick_VerifyQuerySets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuickServer is the server API for Quick service.
// All implementations must embed UnimplementedQuickServer
// for forward compatibility
type QuickServer interface {
	CreateEphemeralDatabase(context.Context, *CreateEphemeralDatabaseRequest) (*CreateEphemeralDatabaseResponse, error)
	DropEphemeralDatabase(context.Context, *DropEphemeralDatabaseRequest) (*DropEphemeralDatabaseResponse, error)
	UploadArchive(context.Context, *UploadArchiveRequest) (*UploadArchiveResponse, error)
	VerifyQuerySets(context.Context, *VerifyQuerySetsRequest) (*VerifyQuerySetsResponse, error)
	mustEmbedUnimplementedQuickServer()
}

// UnimplementedQuickServer must be embedded to have forward compatible implementations.
type UnimplementedQuickServer struct {
}

func (UnimplementedQuickServer) CreateEphemeralDatabase(context.Context, *CreateEphemeralDatabaseRequest) (*CreateEphemeralDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEphemeralDatabase not implemented")
}
func (UnimplementedQuickServer) DropEphemeralDatabase(context.Context, *DropEphemeralDatabaseRequest) (*DropEphemeralDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropEphemeralDatabase not implemented")
}
func (UnimplementedQuickServer) UploadArchive(context.Context, *UploadArchiveRequest) (*UploadArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArchive not implemented")
}
func (UnimplementedQuickServer) VerifyQuerySets(context.Context, *VerifyQuerySetsRequest) (*VerifyQuerySetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyQuerySets not implemented")
}
func (UnimplementedQuickServer) mustEmbedUnimplementedQuickServer() {}

// UnsafeQuickServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuickServer will
// result in compilation errors.
type UnsafeQuickServer interface {
	mustEmbedUnimplementedQuickServer()
}

func RegisterQuickServer(s grpc.ServiceRegistrar, srv QuickServer) {
	s.RegisterService(&Quick_ServiceDesc, srv)
}

func _Quick_CreateEphemeralDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEphemeralDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickServer).CreateEphemeralDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quick_CreateEphemeralDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickServer).CreateEphemeralDatabase(ctx, req.(*CreateEphemeralDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quick_DropEphemeralDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropEphemeralDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickServer).DropEphemeralDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quick_DropEphemeralDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickServer).DropEphemeralDatabase(ctx, req.(*DropEphemeralDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quick_UploadArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickServer).UploadArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quick_UploadArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickServer).UploadArchive(ctx, req.(*UploadArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quick_VerifyQuerySets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyQuerySetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuickServer).VerifyQuerySets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quick_VerifyQuerySets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuickServer).VerifyQuerySets(ctx, req.(*VerifyQuerySetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quick_ServiceDesc is the grpc.ServiceDesc for Quick service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quick_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.sqlc.dev.quickdb.v1.Quick",
	HandlerType: (*QuickServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEphemeralDatabase",
			Handler:    _Quick_CreateEphemeralDatabase_Handler,
		},
		{
			MethodName: "DropEphemeralDatabase",
			Handler:    _Quick_DropEphemeralDatabase_Handler,
		},
		{
			MethodName: "UploadArchive",
			Handler:    _Quick_UploadArchive_Handler,
		},
		{
			MethodName: "VerifyQuerySets",
			Handler:    _Quick_VerifyQuerySets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/quickdb.proto",
}
